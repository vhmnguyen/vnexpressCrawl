# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    depends_on:
      crawlProjDB:
        condition: service_healthy
    environment:
      DATABASE_URL: mysql://root:{insert_password}@0.0.0.0:3306/{insert_db}
    secrets:
      - db-password

  crawlProjDB:
    image: mysql:latest
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - ./.mysql-data/db:/var/lib/mysql
    environment:
      MYSQL_HOST: localhost
      MYSQL_DATABASE: crawlProjDB
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db-password
#    expose:
#      - 3306
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  db-data:

secrets:
  db-password:
    file: crawlProjDB/password.txt
